# Terms for each role.

# Name of all jobs.
jobname:
  Human: '村人'
  Werewolf: '人狼'
  Diviner: '占卜师'
  Psychic: '灵能者'
  Madman: '狂人'
  Guard: '猎人'
  Couple: '共有者'
  Fox: '妖狐'
  Poisoner: '埋毒者'
  BigWolf: '大狼'
  TinyFox: '小狐'
  Bat: '蝙蝠'
  Noble: '贵族'
  Slave: '奴隶'
  Magician: '魔术师'
  Spy: '间谍'
  WolfDiviner: '人狼占卜师'
  Fugitive: '逃亡者'
  Merchant: '商人'
  QueenSpectator: '女王观战者'
  MadWolf: '狂人狼'
  Neet: 'NEET'
  Liar: '骗子'
  Spy2: '间谍Ⅱ'
  Copier: '模仿者'
  Light: '死亡笔记'
  Fanatic: '狂信者'
  Immoral: '背德者'
  Devil: '恶魔'
  ToughGuy: '硬汉'
  Cupid: '丘比特'
  Stalker: '跟踪狂'
  Cursed: '被诅咒者'
  ApprenticeSeer: '见习占卜师'
  Diseased: '病人'
  Spellcaster: '咒言师'
  Lycan: '狼凭'
  Priest: '圣职者'
  Prince: '王子'
  PI: '超常现象研究者'
  Sorcerer: '妖术师'
  Doppleganger: '二重身'
  CultLeader: '邪教主'
  Vampire: '吸血鬼'
  LoneWolf: '一匹狼'
  Cat: '猫又'
  Witch: '魔女'
  Oldman: '老人'
  Tanner: '皮革匠'
  Thief: '小偷'
  OccultMania: '怪诞狂热者'
  WolfCub: '狼之子'
  WhisperingMad: '低语狂人'
  Lover: '求爱者'
  MinionSelector: '仆从选择者'
  Dog: '犬'
  Dictator: '独裁者'
  SeersMama: '占卜师的妈妈'
  Trapper: '陷阱师'
  WolfBoy: '狼少年'
  Hoodlum: '无赖'
  QuantumPlayer: '量子人类'
  RedHood: '小红帽'
  Counselor: '策士'
  Miko: '巫女'
  GreedyWolf: '贪婪的狼'
  FascinatingWolf: '魅惑的女狼'
  SolitudeWolf: '孤独的狼'
  ToughWolf: '硬汉人狼'
  ThreateningWolf: '威吓的狼'
  HolyMarked: '圣痕者'
  WanderingGuard: '游荡猎人'
  ObstructiveMad: '碍事的狂人'
  TroubleMaker: '闹事者'
  FrankensteinsMonster: '弗兰肯斯坦的怪物'
  BloodyMary: '血腥玛丽'
  King: '国王'
  PsychoKiller: '变态杀人狂'
  SantaClaus: '圣诞老人'
  Phantom: '怪盗'
  BadLady: '恶女'
  DrawGirl: '看板娘'
  CautiousWolf: '慎重的狼'
  Pyrotechnist: '烟火师'
  Baker: '面包店'
  Bomber: '炸弹魔'
  Blasphemy: '亵渎者'
  Ushinotokimairi: '丑时之女'
  Patissiere: '女糕点师'
  GotChocolate: '巧克力'
  MadDog: '狂犬'
  Hypnotist: '催眠师'
  CraftyWolf: '狡猾的狼'
  Shishimai: '狮子舞'
  Pumpkin: '南瓜魔'
  MadScientist: '疯狂科学家'
  SpiritPossessed: '恶灵凭依'
  Forensic: '法医学者'
  Cosplayer: 'Cosplayer'
  TinyGhost: '妖怪'
  Ninja: '忍者'
  Twin: '双胞胎'
  Hunter: '狩猎者'
  MadHunter: '复仇者'
  MadCouple: '尖叫狂人'
  Emma: '阎魔'
  EyesWolf: '瞳狼'
  TongueWolf: '舌祸狼'
  BlackCat: '黑猫'
  Idol: '偶像'
  XianFox: '仙狐'
  LurkingMad: '潜伏者'
  SnowLover: '雪女'
  Raven: '乌鸦'
  DecoyWolf: '囮狼'
  LunaticLover: '狂爱者'
  Hooligan: '暴徒'
  HooliganAttacker: '暴动者'
  HooliganGuard: '保安'
  HomeComer: '探亲者'
  Illusionist: '奇术师'
  DragonKnight: '龙骑士'
  Satori: '觉'
  Samurai: '武士'
  Dracula: '德古拉'
  VampireClan: '吸血鬼的眷属'
  Elementaler: '精灵术士'
  Poet: '诗人'
  Amanojaku: '天邪鬼'
  Ascetic: '苦修士'
  DarkClown: '暗小丑'
  DualPersonality: '二重人格'
  Sacrifice: '活祭品'
  AbsoluteWolf: '绝对狼'
  Oracle: '预言者'
  NightRabbit: '夜兔'
  GachaAddicted: '课金者'
  Fate: '命运之子'
  Synesthete: '通感者'
  Reindeer: '驯鹿'
  Streamer: '主播'
  Listener: '直播观众'
  QueenOfNight: '月下美人'
  Tarzan: '野孩子'
  CurseWolf: '咒狼'
  Hitokotonushinokami: '一言主神'
  RemoteWorker: '在宅者'
  IntuitionWolf: '直觉型狼'
  Lorelei: '罗蕾莱'
  Gambler: '赌徒'
  Faker: '老千'
  SealWolf: '印狼'
  CynthiaWolf: '月狼'
  Trickster: '恶作剧妖精'
  Sleepwalker: '梦游患者'
  Disguised: '变装者'
  Oni: '鬼'
  Saint: '圣子'
  NetherWolf: '冥狼'
  DarkWolf: '暗狼'
  Acrobat: '杂耍艺人'
  Hanami: '赏花客'
  GoldOni: '金鬼'
  BloodWolf: '血狼'
  Reincarnator: '转生者'
  Duelist: '决斗者'
  MementoDisposer: '遗品整理士'
  Interpreter: '翻译'
  Hierarch: '教主'
  Dreamer: '蝴蝶'
  VariationFox: '歪狐'
  Assassin: '暗杀者'
  Shadow: '影法师'
  AttractiveWoman: '美女'
  DestroyCraziest: '破坏的狂人'
  Actress: '女狐'
  StraySheep: '迷途羔羊'
  SpaceWerewolfCrew: '宇航员'
  SpaceWerewolfImposter: '诈欺师'
  SpaceWerewolfObserver: '观察者'
  SpaceWerewolfGuard: '警戒员'
  SpaceWerewolfSabotage: '破坏者'
  FrontOni: '前鬼'
  BackOni: '后鬼'
  Secretary: '秘书'
  ResidualHaunting: '地缚灵'
  HouseKeeper: '保姆'
  RainyBoy: '雨男'
  DarkPsychic: '黑暗灵媒师'
  Itako: '潮来巫女'

  # Name of special subjobs.
  GameMaster: '游戏管理员'
  Helper: '帮手'
  Waiting: '尚未分配'
  Watching: '观战者'

# Name of categories.
categoryName:
  Human: '村人系'
  Werewolf: '人狼系'
  Fox: '妖狐系'
  Madman: '狂人系'
  Immoral: '背德者系'
  Switching: '职业变化系'
  Others: '第三阵营系'

# Name of teams.
teamName:
  Human: '村人阵营'
  Werewolf: '人狼阵营'
  LoneWolf: '人狼阵营'
  Fox: '妖狐阵营'
  Friend: '恋人阵营'
  Devil: '恶魔'
  Vampire: '吸血鬼阵营'
  Cult: '教会阵营'
  Raven: '乌鸦阵营'
  Hooligan: '暴徒阵营'
  Duel: '决斗者阵营'
  Lorelei: '罗蕾莱阵营'
  Neet: 'NEET'
  Others: '其他'

# Fortune result.
fortune:
  human: '村人'
  werewolf: '人狼'
  vampire: '吸血鬼'
  pumpkin: '南瓜'
  oni: '鬼'

# Psychic result.
psychic:
  human: '村人'
  werewolf: '人狼'
  BigWolf: '大狼'
  TinyFox: '小狐'
  oni: '鬼'
  # delimiter of multiple result in chemical.
  _delimiter: '×'

# Diviner
Diviner:
  # Divine result
  result:
    human: '村人'
  # Today's target is automatically chosen.
  auto: '{{name}} 今天将会随机占卜一个人。'
  # Selected a target.
  select: '{{name}} 占卜了 {{target}} 的身份。'
  # Divining result.
  resultlog: '{{name}} 占卜了 {{target}} 的身份，他是 {{result}}。'

# Psychic
Psychic:
  result:
    human: '村人'
  # Psychi result.
  resultlog: '根据 {{name}} 的灵能结论，被处刑的 {{target}} 是 {{result}}。'

# Werewolf
Werewolf:
  # Error: Werewolves cannot eat each other
  noWolfAttack: '人狼之间不能相互袭击。'
  # Selected a target.
  select: '以 {{name}} 为首的人狼们决定今晚袭击 {{target}}。'

# Guard
Guard:
  # Error: a Guard cannot guard a same player twice in a row
  noGuardSame: '不能连续守护同一个人。'
  # Selected a target.
  select: '{{name}} 守护了 {{target}}。'
  # Log of GJ
  gj: '{{guard}} 成功守护了 {{name}}。'

# Poisoner
Poisoner:
  select: '{{name}} 的毒药泼了 {{target}} 一脸。'

# TinyFox
TinyFox:
  # Successful result of divine by TinyFOx.
  resultlog_success: '根据 {{name}} 的占卜结果，{{target}} 应该是 {{result}} 吧？'
  # Failure
  resultlog_fail: '根据 {{name}} 的占卜结果，{{target}} 是一个看不透的怪人。'

# Magician
Magician:
  select: '{{name}} 对 {{target}} 使用了死者复活术。'

# Spy
Spy:
  select: '{{name}} 决定要离开村子。'

# WolfDiviner
WolfDiviner:
  select: '人狼占卜师 {{name}} 占卜了 {{target}} 的身份。'
  resultlog: '人狼占卜师 {{name}} 占卜了 {{target}} 的身份，他是 {{result}}。'

# Fugitive
Fugitive:
  noSelf: '不能逃到自己的家里去。'
  select: '{{name}} 逃亡到 {{target}} 的家里去了。'

# Merchant
Merchant:
  # Name of kits.
  kit:
    Diviner: '占卜套装'
    Psychic: '灵能套装'
    Guard: '守护套装'
  # Error: cannot send a kit to oneself.
  noSelf: '不能送给自己'
  select: '{{name}} 向 {{target}} 寄出了 {{kit}}。'
  # A kit is delivered to a player.
  delivered: '{{name}} 收到了礼物 {{kit}}。'

# Liar
Liar:
  # Result.
  resultlog: '虽然不是很自信，根据骗子占卜的结果 {{target}} 大概是 {{result}}，大概。'

# Spy2
Spy2:
  # His report is found.
  found: '发现了 {{name}} 的调查报告书。'

# Copier
Copier:
  # Selected a target.
  select: '{{name}} 模仿了 {{target}} 的能力。'

# Light
Light:
  # Selected a target.
  select: '{{name}} 在死亡笔记上写下了 {{target}} 的名字。'

# Devil
Devil:
  # attacked by a werewolf.
  attacked: '{{name}} 被人狼袭击了，恶魔的力量大幅增强。'

# Cupid
Cupid:
  # First select.
  select1: '{{name}} 把 {{target}} 定为恋人中的一人。'
  # Error: select another player
  noSelectTwice: '请选择另一个恋人'
  # Select a target.
  select: '{{name}} 向 {{target}} 射出了爱之箭。'
  # Became a lover.
  become: '{{name}} 成为了恋人。'

# Stalker
Stalker:
  # Selected a target.
  select: '{{name}} 跟踪了 {{target}}（{{job}}）。'

# Cursed
Cursed:
  # became a werewolf.
  becomeWerewolf: '{{name}} 受到诅咒变成了人狼。'
  # became a vampire.
  becomeVampire: '{{name}} 受到诅咒变成了吸血鬼。'

# Spellcaster
Spellcaster:
  # Error: this player is already cursed
  noSelectTwice: '这个对象已经被咒言诅咒过了。'
  # Selected a target.
  select: '{{name}} 夺去了 {{target}} 的声音。'
  # A player is cursed.
  cursed: '{{name}} 的声音被夺去了。今天白天无法发言。'

# Priest
Priest:
  # Selected a target.
  select: '{{name}} 以神圣的力量守护了 {{target}}。'
  protected: '{{name}} 凭借神圣的力量抵抗了 {{found}}。'

# Prince
Prince:
  # Canceled a punishment.
  cancel: '{{name}} 是 {{jobname}}。本次处刑被取消了。'

# PI
PI:
  # selected a target.
  select: '{{name}} 调查了 {{target}} 和他的左右邻居。'
  # result (something found)
  found: '{{name}} 调查了 {{target}} 和他的左右邻居，发现了 {{result}} 活动的迹象。'
  # result (everyone human)
  notfound: '{{name}} 调查了 {{target}} 和他的左右邻居，发现全员都是村人。'

# Sorcerer
Sorcerer:
  # Select a target.
  select: '{{name}} 用妖术调查了 {{target}}。'
  # Result (diviner found)
  found: '{{name}} 用妖术调查了 {{target}}，他是占卜师。'
  # Result (diviner not found)
  notfound: '{{name}} 用妖术调查了 {{target}}，他不是占卜师。'

# Doppleganger
Doppleganger:
  # Select a target.
  select: '{{name}} 成为了 {{target}} 的二重身。'

# CultLeader
CultLeader:
  # Select a target.
  select: '{{name}} 发展 {{target}} 成为信者。'
  # Became a cult member.
  become: '{{name}} 成为了教会的信者。'

# Vampire
Vampire:
  # Select a target.
  select: '{{name}} 袭击了 {{target}}。'

# Cat
Cat:
  # Select a target.
  select: '{{name}} 对 {{target}} 使用了死者复活术。'
  reviveWrongPlayer: '{{name}} 的手滑了一下，不小心复活了 {{target}}。'

# Witch
Witch:
  # Select a target of poison.
  selectPoison: '{{name}} 对 {{target}} 使用了毒药。'
  # Select a target of revival.
  selectRevival: '{{name}} 对 {{target}} 使用了复活药。'

# OccultMania
OccultMania:
  # Select a target.
  select: '{{name}} 指定了 {{target}}。'

# Lover
Lover:
  # Select a target.
  select: '{{name}} 向 {{target}} 求爱了。'
  # Become a lover.
  become: '{{name}} 受到求爱变成了恋人。'

# MinionSelector
MinionSelector:
  # Select a target.
  select: '{{name}} 指定 {{target}}（{{jobname}}）成为了狼的仆从。'
  # Become a wolfminion.
  become: '{{name}} 变成了狼的仆从。'

# Theif
Thief:
  # Candidates are shown.
  candidates: '{{name}} 可以选择的职业有 {{jobnames}}。'

# Dog
Dog:
  # Select an owner.
  select: '{{name}} 选择 {{target}} 成为了自己的饲主。'
  # Attack the owner.
  attack: '{{name}} 袭击了 {{target}}。'

# Dictator
Dictator:
  # Select a punishment target.
  select: '独裁者 {{name}} 宣布将要处刑 {{target}}。'
  sunset: '独裁者 {{name}} 宣布，现在天黑了。'

# SeersMama
SeersMama:
  # There is no seer.
  resultNone: '{{name}} 是占卜师的妈妈。没有占卜师。'
  # There are one or more seer. (number is given as count)
  result: '{{name}} 是占卜师的妈妈。{{results}} 是占卜师。'

# Trapper
Trapper:
  # Select a target.
  select: '{{name}} 用陷阱守护了 {{target}}。'
  # GJ log.
  gj: '{{guard}} 的陷阱成功守护了 {{name}}。'

# WolfBoy
WolfBoy:
  # Select a target.
  select: '{{name}} 把 {{target}} 伪装成了人狼。'

# Hoodlum
Hoodlum:
  # Error: this player is already selected
  alreadySelected: '{{name}} 已经被选为对象。'
  # Select a target.
  select: '{{name}} 憎恨 {{target}}。'

# QuantumPlayer
QuantumPlayer:
  # Cannot divine.
  cannotDivine: '{{name}} 已经不可能是占卜师，不能进行占卜。'

# Counselor
Counselor:
  # Select a target.
  select: '{{name}} 尝试了策反 {{target}}。'
  # Rehabilitated
  rehabilitate: '{{name}} 被策反了。'

# Miko
Miko:
  # Select a self protection.
  select: '{{name}} 用神圣的力量守护了自己。'
  protected: '{{name}} 凭借神圣的力量抵抗了 {{found}}。'

# GreedyWolf
GreedyWolf:
  # Select a greed.
  select: '为了满足 {{name}} 的贪欲。人狼们今晚可以多袭击一个人。'

# FascinatingWolf
FascinatingWolf:
  # Select a target.
  select: '{{name}} 魅惑了 {{target}}。'
  # Affected by her.
  affected: '{{name}} 被狼魅惑了。'

# SolitudeWolf
SolitudeWolf:
  # A turn of solitudewolf comes
  turn: '{{name}} 现在可以袭击他人了。'
  # Another wolf's turn!
  noturn: '其他的人狼还活着。{{name}} 现在不能袭击他人。'

# ToughWolf
ToughWolf:
  # Select a tough attack
  select: '{{name}} 抱着舍身的觉悟袭击了 {{target}}。'
# ThreateningWolf
ThreateningWolf:
  # Select a threatening.
  select: '{{name}} 威吓了 {{target}}。'
  # Affected by threatening.
  affected: '{{name}} 受到了威吓。今晚的能力无法发动。'

WanderingGuard:
  # This player cannot be guarded anymore.
  noGuardMode: '{{name}} 不能护卫 {{target}}。'

ObstructiveMad:
  # Select a target.
  select: '{{name}} 妨碍了 {{target}}。'
  # a Diviner is blocked.
  blocked: '{{name}} 占卜了 {{target}} 的身份，但是被不知道什么人妨碍了。'
  # SpaceWerewolfObserver is blocked
  spaceWerewolfObserverBlocked: '{{name}} 观察了 {{target}} 的身份，但是被不知道什么人妨碍了。'

TroubleMaker:
  # Select to make a trouble.
  select: '{{name}} 在村子里引发了混乱。'
  # System announce that a trouble has happened.
  # A number of punished players is given as count.
  announce: '闹事者在村子里引发了混乱。今日将会处刑 {{count}} 个人。'

FrankensteinsMonster:
  # Drained a role from a body.
  drain: '{{name}} 从 {{target}} 的尸体里吸收了 {{jobname}} 的能力。'
  # separator ob jobs.
  separator: '、'

BloodyMary:
  # Select a target.
  select: '{{name}} 诅咒了 {{target}}。'
  # name of normal Mary.
  mary: '玛丽'

SantaClaus:
  # Error: this player is already given a present.
  noSelectTwice: '这个人已经不能继续接受礼物了。'
  # Select a target.
  select: '{{name}} 向 {{target}} 赠送了礼物。'
  # Name of thing.
  thing:
    HolyMarked: '圣痕者套装'
    Oldman: '玉手箱（老人）'
    Priest: '圣职者套装'
    Miko: '巫女套装'
    Diviner: '占卜套装'
    Guard: '守护套装'
    Psychic: '灵能套装'
  # Log of delivered presents.
  deliver:
    # A poison present is delivered.
    poison: '{{name}} 收到了剧毒的礼物。'
    # internal: a template for present delivery.
    _log: '{{name}} 收到了礼物 {{thing}}。'

Phantom:
  # Select not to seal a role.
  selectNoSteal: '{{name}} 没有盗取职业。'
  # Select to steal.
  select: '{{name}} 盗取了 {{target}} 的职业。{{target}} 被盗之前是 {{jobname}}。'
  # option not to steal.
  noStealOption: '放弃盗取'
  # A job is stolen.
  stolen: '{{name}} 的职业被盗走了，变成了 {{jobname}}。'

BadLady:
  # Select a main friend.
  selectMain: '{{name}} 选择了 {{target}} 作为自己的本命对象。'
  # Select a keep friend.
  selectKeep: '{{name}} 选择了 {{target}} 作为玩弄的对象。'

DrawGirl:
  # Reveal that a player is a DrawGirl.
  reveal: '{{name}} 是看板娘。今日将有 {{count}} 人被处刑。'

CautiousWolf:
  # Select not to attack.
  selectNoAttack: '以 {{name}} 为首的人狼们决定今晚不发动袭击。'
  # option not to attack.
  noAttackOption: '不袭击'

Pyrotechnist:
  # Select to launch fireworks.
  select: '{{name}} 准备释放烟火了。'
  # System log that fireworks is fired.
  affect: '美丽的烟火被打上了天空。今晚不能使用能力。'

Baker:
  # System log that a Baker is alive.
  alive: '面包店烤好了美味的面包。'
  # System log that a Baker has dead.
  dead: '今天开始没有美味的面包吃了。'

Bomber:
  # Select to set a bomb.
  select: '{{name}} 向 {{target}} 送出了炸弹。'

Blasphemy:
  # Select to perform a blasphemy.
  select: '{{name}} 亵渎了 {{target}}。'

Ushinotokimairi:
  # Select to perform a curse.
  select: '{{name}} 诅咒了 {{target}}。'

Patissiere:
  # select a main friend.
  select: '{{name}} 选择了 {{target}} 作为自己的本命对象。'
  # Chocolate is delivered.
  deliver: '{{name}} 收到了巧克力。'
  # Become a lover with.
  become: '{{name}} 与 {{target}} 结为恋人。'

GotChocolate:
  # I'm a main friend!
  main: '{{name}} 吃下的巧克力是本命巧克力。{{name}} 与 {{target}} 结为恋人。'
  # I'm not a main friend!
  sub: '{{name}} 吃下的巧克力是义理巧克力。'
  # Rare pattern: no lover.
  noLover: '{{name}} 吃下了巧克力，什么都没有发生。'
  # Chocolate results
  result:
    # Cursed chocolate
    cursed: '{{name}} 吃下的巧克力是被诅咒的巧克力，下一天白天不能发言。'
    # Black chocolate
    black: '{{name}} 吃下的巧克力是黑巧克力，占卜·灵能结果将变为「人狼」。'
    # White chocolate
    white: '{{name}} 吃下的巧克力是白巧克力，占卜·灵能结果将变为「村人」。'
    # Poison chocolate
    poison: '{{name}} 吃下的巧克力是毒巧克力，将被毒死。'
    # Stalker
    stalker: '{{name}} 凭借执念找到了巧克力的送出人，{{name}} 成为了 {{target}} 的跟踪狂。'
    # Vampire chocolate
    vampire: '{{name}} 吃下的巧克力不知为何有铁锈的味道，占卜结果将变为「吸血鬼」。'
    # Priest
    priest: '{{name}} 吃下的巧克力蕴含着神圣的力量，{{name}} 可以使用一次「圣职者」的能力。'

MadDog:
  # Select a target of an attack.
  select: '{{name}} 袭击了 {{target}}。'

Hypnotist:
  # Select a target of hypnosis.
  select: '{{name}} 催眠了 {{target}}。'

CraftyWolf:
  # Select to craft a fake die
  select: '{{name}} 假死了。'
  # Select to cancel a fake die
  cancel: '{{name}} 取消假死了。'

Shishimai:
  # Error: that player is already bitten
  noSelectTwice: '这个玩家已经被咀嚼过了。'
  # Select a target.
  select: '{{name}} 咀嚼了 {{target}}。'

Pumpkin:
  # Select a pumpkinize target.
  select: '{{name}} 把 {{target}} 变成了南瓜。'

MadScientist:
  # Select a revival target.
  select: '{{name}} 对 {{target}} 实施了复活手术。'

Forensic:
  # Select a target.
  select: '{{name}} 调查了 {{target}} 的尸体。'
  # The target had a death resistance.
  resultYes: '根据 {{name}} 的尸检结果，{{target}} 持有死亡耐性。'
  # The target did not have a death resistance.
  resultNo: '根据 {{name}} 的尸检结果，{{target}} 没有死亡耐性。'

Ninja:
  # Select a target.
  select: '{{name}} 侦查了 {{target}}。'
  # Result (yes)
  resultYes: '根据 {{name}} 的侦查结果，{{target}} 可以在夜间行动。'
  # Result (no)
  resultNo: '根据 {{name}} 的侦查结果，{{target}} 不能在夜间行动。'

Hunter:
  # Select a hunting target.
  select: '{{name}} 向 {{target}} 开枪了。'

Emma:
  # Emma result strings
  result:
    # killed by werewolf
    werewolf: '{{name}} 成为了人狼的食物。'
    # killed with poison
    poison: '{{name}} 由于中毒死去了。'
    # Killed by QueenSpectator
    hinamizawa: '{{name}} 由于雏见泽症候群发作死去了。'
    # Killed by a vampire
    vampire: '{{name}} 成为了吸血鬼的食物。'
    # Killed by a dog
    dog: '{{name}} 成为了犬的食物。'
    # Killed with traps
    trap: '{{name}} 由于落入陷阱死去了。'
    # Killed with bombs
    bomb: '{{name}} 被炸弹炸死了。'
    # Killed by a curse
    curse: '{{name}} 被咒杀了。'
    # Killed by a PsychoKiller
    psycho: '{{name}} 被变态杀人狂杀死了。'
    # Killed a LunaticLover
    lunaticlover: '{{name}} 被狂爱者杀死了。'
    # Suicided after fox
    foxsuicide: '{{name}} 追随着妖狐自尽了。'
    # Suicided after friend
    friendsuicide: '{{name}} 追随着恋人自尽了。'
    # Suicided after his twin
    twinsuicide: '{{name}} 追随着双胞胎自尽了。'
    # DragonKnight's suicide
    dragonknightsuicide: '{{name}} 由于自责选择了自杀。'
    # Suicided after vampires
    vampiresuicide: '{{name}} 追随着吸血鬼自尽了。'
    # Suicided after Santaclause
    santasuicide: '{{name}} 追随着圣诞老人自尽了。'
    # Suicided after QueenOfNight
    fascinatesuicide: '{{name}} 似乎因为沉迷于什么而自尽了。'
    # Killed by hooligan
    hooligan: '{{name}} 被暴动者杀死了。'
    # Killed by DragonKnight
    dragon: '{{name}} 被炽热的龙息烧死了。'
    # Killed by Samurai
    samurai: '{{name}} 被武士一刀两断了。'
    # Killed by Elementaler
    elemental: '{{name}} 被暴走的精灵杀死了。'
    # Sacrifice
    sacrifice: '{{name}} 被作为活祭品献祭了。'
    # Lorelei
    lorelei: '{{name}} 被怨恨的歌声诱导了。'
    # Killed by Oni
    oni: '{{name}} 被鬼捉走了。'
    # Self-Destruct
    selfdestruct: '{{name}} 自爆了。'
    # Killed by Assassin
    assassinate: '{{name}} 被暗杀了。'
    # Killed by DarkPsychic
    ghostrevenge: '{{name}} 被亡灵的怨念杀死了。'

EyesWolf:
  # EyesWolf result strings
  # Wolves' attack failed because ...
  result:
    # Has tolerance to wolf attack
    tolerance: '向 {{name}} 发起的袭击，被耐性阻止了。'
    # Guard
    guard: '向 {{name}} 发起的袭击，被守卫阻止了。'
    # Cover by someone
    cover: '向 {{name}} 发起的袭击，因为另一个人的牺牲失败了。'
    # Target was absent
    absent: '向 {{name}} 发起的袭击，因为 {{name}} 的逃亡扑了个空。'
    # Devil's power
    devil: '向 {{name}} 发起的袭击，被恶魔的力量阻止了。'
    # Curse power
    cursed: '向 {{name}} 发起的袭击，被诅咒的力量阻止了。'
    # Holy power
    holy: '向 {{name}} 发起的袭击，被神圣的力量阻止了。'
    # Guard by a trap
    trap: '向 {{name}} 发起的袭击，被陷阱阻止了。'
    # Guard by a SnowLover
    snow: '向 {{name}} 发起的袭击，被风雪阻止了。'
    # Target was Acrobat
    acrobat: '向 {{name}} 发起的袭击，被杂耍般的动作躲开了。'

TongueWolf:
  # Result of TongueWolf skill.
  result: '根据 {{name}} 品尝的结果，{{target}} 是 {{job}}。'
  # Result when the skill is lost.
  resultLost: '根据 {{name}} 品尝的结果，{{target}} 是 {{job}}。从此以后无法再知道袭击目标的职业了。'

Idol:
  # Select a fan,
  select: '{{name}} 把 {{target}} 变成自己的粉丝了。'
  # Becoming a fan of idol.
  become: '{{name}} 被 {{idol}} 圈粉了。'
  # Result of observation.
  result: '根据 {{name}} 的敏锐观察，现在村人阵营的人数有 {{count}} 人。'
  
XianFox:
  # Select a target.
  select: '{{name}} 透视了 {{target}} 的职业。'
  # Result of skill (announced to everyone).
  result: '昨晚仙狐透视的结果是 {{result}}。'
  
SnowLover:
  # Select a target.
  select: '{{name}} 向 {{target}} 求爱了。'
  # Become a lover.
  become: '{{name}} 受到求爱变成了恋人。'

Raven:
  # message when 1 or less Ravens are alive.
  message: '乌鸦的啼鸣响彻村子的上空。'
  
DecoyWolf:
  # Use skill.
  select: '{{name}} 潜入 {{target}} 的家里变成了诱饵。'

LunaticLover:
  # Select a target of lunatic love.
  select: '{{name}} 把 {{target}} 选为自己疯狂爱慕的对象。'
  
Hooligan:
  # Select a new member of hooligan.
  select: '{{name}} 鼓动 {{target}} 加入了暴动。'
  # Become a HooliganMember.
  become: '{{name}} 加入了暴动。'
  # Found a guard.
  foundGuard: '{{name}} 试图鼓动 {{target}} 加入暴动，却发现 {{target}} 是保安。'

HooliganAttacker:
  # name of HooliganMember.
  jobname: '{{jobname}}（暴动者）'
  # select a target of attack.
  select: '{{name}} 向 {{target}} 施加暴行。'
  # HooliganMember was arrested (for original Hooligan)
  arrested: '{{name}} 由于被保安逮捕，没能成功的施加暴行。'
  # HooliganMember was uncomplexed
  uncomplex: '{{name}} 由于被保安逮捕，退出了暴动。'

HooliganGuard:
  # name of HooliganGuardComplex.
  jobname: '{{jobname}}（保安）'
  # become a guard at first night.
  become: '由于村子里潜入了暴徒，{{name}} 被任命为保安。'
  # select a target of arrest.
  select: '{{name}} 逮捕了 {{target}}。'
  
HomeComer:
  # select a target of gift.
  select: '{{name}} 向 {{target}} 赠送了 {{kit}}。'

Illusionist:
  # select a target of illusion.
  select: '{{name}} 把今晚人狼的袭击目标改变成了 {{target}}。'

DragonKnight:
  # select a target of kill.
  killSelect: '{{name}} 袭击了 {{target}}。'

Satori:
  # Today's target is automatically chosen.
  auto: '{{name}} 今天将会随机选择一个人进行读心。'
  # select a target of mind reading.
  select: '{{name}} 对 {{target}} 使用了读心术。'
  # log of result.
  resultlog: '根据 {{name}} 的读心结果，{{target}} 是 {{result}}。'

Dracula:
  # select today's target of Dracula
  select: '{{name}} 想要试试看吸 {{target}} 的血。'
  # decided target
  decide: '德古拉吸了 {{target}} 的血。'
  # there was a dracula attack.
  attackLog: '德古拉成功吸血了。'
  # there was no attack.
  noAttackLog: '德古拉吸血失败了。'

Elementaler:
  # select target of guard
  select: '{{name}} 使用精灵的力量守护了 {{target}}。'

Poet:
  # select destination of poem.
  select: '{{name}} 向 {{target}} 赠诗。'
  # received from someone.
  become: '{{name}} 收到了来自 {{sender}} 的赠诗，变成了诗人。'

DarkClown:
  # System log that a DarkClown is alive.
  alive: '小丑潜入了村子，村民们开始失去理智。'
  # System log that a DarkClown has dead.
  dead: '小丑从村子中离开了，村民们逐渐寻回了理智。'
  
DualPersonality:
  # Your team is 'werewolf'.
  werewolf: '今天 {{name}} 的主导人格是人狼侧的。'
  # Your team is 'human'.
  human: '今天 {{name}} 的主导人格是村人侧的。'

Sacrifice:
  # Selected a target.
  select: '{{name}} 为了守护 {{target}} 而甘愿成为活祭品。'
  protected: '{{name}} 献上了活祭品，成功抵抗了 {{found}}。'

AbsoluteWolf:
  protected: '{{name}} 凭借自身的绝对实力抵抗了 {{found}}。'

Oracle:
  friend: '{{name}} 得到了神谕。恋人阵营马上就要获胜了。'
  fox: '{{name}} 得到了神谕。妖狐阵营马上就要获胜了。'
  werewolf: '{{name}} 得到了神谕。人狼阵营马上就要获胜了。'

GachaAddicted:
  type:
    normal: '普通抽卡'
    premium: '稀有抽卡'
  gacha: '{{name}} 在 {{gachaType}} 抽卡后获得了 {{rarity}}【{{jobname}}】。'
  commit: '{{name}} 决定使用抽到的【{{jobname}}】。'

Fate:
  changeRole: '{{name}} 明悉了自己乃是命运之子，决意作为一名 {{result}} 生存下去。'

Synesthete:
  select: '{{name}} 使用通感的能力查看了 {{target}} 的颜色。'
  result: '{{name}} 使用通感的能力查看了 {{target}} 的颜色，那是一片 {{result}}。'
  color:
    - 赤色
    - 茶色
    - 橙色
    - 小麦色
    - 黄色
    - 土黄色
    - 绿色
    - 淡蓝色
    - 蓝色
    - 青色
    - 紫色
    - 樱色
    - 金色
    - 银色
    - 灰色

Streamer:
  becomeListener: '{{name}} 变成了 {{target}} 的直播观众。'
  getJob: '{{name}} 在今晚将要尝试 {{job}} 的职业。'
  retire: '{{name}} 因为失去了直播观众而引退了，现在变成了 {{job}}。'

QueenOfNight:
  FascinatePlayer: '{{name}} 骚乱了 {{target}} 的心。'

Tarzan:
  # Result of skill.
  result: '{{name}} 察觉到了 {{count}} 名人狼的气息。'

RemoteWorker:
  # Canceled a punishment.
  cancel: '{{name}} 因为一直宅在家里而免受处刑。'

IntuitionWolf:
  # Canceled a punishment.
  guarded: '{{name}} 凭直觉感到自己被 {{target}} 护卫了。'

Lorelei:
  select: '{{name}} 被罗蕾莱的歌声魅惑了。'
  song: '罗蕾莱的歌声在村中盘旋。'

Gambler:
  form:
    bet: '参加赌博'
    keep: '远离赌博'
  bet: '{{name}} 加入了赌博。'
  keep: '{{name}} 没有加入赌博。'

CynthiaWolf:
  affected: '{{target}} 被 {{name}} 放出的月亮的气场魅惑了。'

Trickster:
  # First select.
  select1: '{{name}} 指定 {{target}} 为羁绊中的第1人。'
  select2: '{{name}} 指定 {{target}} 为羁绊中的第2人。'
  # Error: select another player
  noSelectTwice: '请选择另一个不同的对象。'
  # Select a target.
  select: '{{name}} 在 {{target}} 的命运中系上了绳结。'
  # Became a lover.
  become: '{{name}} 缔结了命运的羁绊。'

Sleepwalker:
  awake: '{{name}} 察觉自己的深夜里徘徊。'

Oni:
  select: '{{name}} 准备把 {{target}} 捉走。'

Saint:
  select: '{{name}} 对 {{target}} 使用了奇迹之力。'

DarkWolf:
  hidden: '投票结果被黑暗吞没了。'

Acrobat:
  cancel: '{{name}} 躲开了人狼的袭击。'

Hanami:
  drunk: '{{name}} 与友人们赏花过后尽兴归去了，其中似乎有人酩酊大醉。'

BloodWolf:
  using: '{{name}} 以自身为祭品，引出了血月之力。'
  affect: '血月之力封印了村人们的能力。'

Reincarnator:
  revive: '{{name}} 转生成了 {{target}}。'

Duelist:
  # Select a target.
  select: '{{name}} 向 {{target}} 发起了决斗邀请。'
  # Become a enemy.
  become: '{{target}} 与 {{name}} 开始决斗了。'

MementoDisposer:
  select: '{{name}} 整理了 {{target}} 的遗物。'
  resultYes: '{{name}} 整理遗物时，在 {{target}} 的遗物中发现了能够致人死命的凶器。'
  resultNo: '{{name}} 整理遗物时，没有在 {{target}} 的遗物中发现可疑物品。'

Interpreter:
  select1: '{{name}} 把 {{target}}选为提供传译的第1人。'
  select2: '{{name}} 把 {{target}}选为提供传译的第2人。'
  noSelectTwice: '不能多次选择同一人。'
  select: '{{name}} 为 {{target}} 提供翻译。'
  become: '有一位翻译为 {{name}}提供服务。'

Dreamer:
  cancel: '{{name}} 从长梦中惊醒，原来自己是蝴蝶。'

VariationFox:
  variation: '{{name}} 改变了自身的体质。'

Assassin:
  select: '{{name}} 暗杀了 {{target}}。'

Shadow:
  select: '{{name}} 剥去了 {{target}} 的影子。'
  notification: '{{target}} 的影子被藏起来了。'

AttractiveWoman:
  select: '{{name}} 魅惑了 {{target}}。'

DestroyCraziest:
  select: '{{name}} 向 {{target}} 释放了破坏的诅咒。'

Actress:
  existence: '{{name}} 从舞台谢幕了。'

StraySheep:
  select: '{{name}} 决意替他人死去了。'

Secretary:
  select: '{{name}} 决定辅佐 {{target}}。'

ResidualHaunting:
  select: '{{name}} 成为了 {{target}} 家中的地缚灵。'

HouseKeeper:
  select: '{{name}} 前往 {{target}} 的家打理家务。'
  detect: '{{name}} 目击了 {{werewolf}} 袭击 {{target}} 的现场。'

RainyBoy:
  select: '{{name}} 决定明天会下雨。'
  weather: '今天下雨了。'

Itako:
  select: '{{name}} 侧耳倾听了 {{target}} 的声音。'
  result: '{{name}} 侧耳倾听了 {{target}} 的声音。{{target}} 是 {{job}}。'

# Werewolf
SpaceWerewolfImposter:
  # Selected a target.
  select: '以 {{name}} 为首的诈欺师们决定今晚袭击 {{target}}。'

SpaceWerewolfObserver:
  # Selected a target.
  select: '{{name}} 观察了 {{target}}。'
  resultImposter: '根据 {{name}} 对 {{target}} 的观察，{{target}} 是背叛者。'
  resultNotImposter: '根据 {{name}} 对 {{target}} 的观察，{{target}} 不是背叛者。'

SpaceWerewolfGuard:
  select: '{{name}} 守护了 {{target}}。'

GameMaster:
  # Failed to revive.
  reviveFail: '这名玩家无法复活。'
  # Failed to shorten time.
  shortenFail: '无法继续缩短剩余时间。'
  # GM log to heaven.
  heavenLog: 'GM→灵界'
  # GM log to audience.
  audienceLog: 'GM→观战者'
  # GM monologue name.
  monologueLog: 'GM自言自语'

Helper:
  # Select a help target.
  select: '{{name}} 成为了 {{target}} 的帮手。'

Waiting:
  # No preference.
  none: '随机'
  # Select a preference of job.
  select: '{{name}} 希望成为 {{jobname}}。'
  # Select none.
  selectNone: '{{name}} 决定随机选择职业。'

##### Sub jobs!
Friend:
  # name for desc
  name: '恋人'
  # jobname of Friend
  jobname: '恋人（{{jobname}}）'

CultMember:
  # name for desc
  name: '教会信者'
  # jobname
  jobname: '教会信者（{{jobname}}）'

WolfMinion:
  # name for desc
  name: '狼的仆从'
  # jobname
  jobname: '狼的仆从（{{jobname}}）'

LowB:
  # name for desc
  name: 'LowB'
  # jobname
  jobname: 'LowB（{{jobname}}）'
  notice: '村里蔓延着lowb的气息...'
  awake: '{{name}} 发现自己就是那个lowb。'
  sleepJobname: '未觉醒LowB'


HolyProtected:
  guarded: '{{name}} 被神圣的力量守护了。'

Drunk:
  # jobname
  jobname: '醉鬼（{{jobname}}）'
  # Awake from drunk.
  awake: '{{name}} 酒醒了。'

Counseled:
  name: '更生者'
  jobname: '更生者（{{jobname}}）'

KeepedLover:
  fakeName: '恋人'
  jobname: '手玉（{{jobname}}）'
  fakeJobname: '恋人（{{jobname}}）'

FoxMinion:
  jobname: '狐凭（{{jobname}}）'
  
GotChocolateTrue:
  jobname: '本命（{{jobname}}）'

FanOfIdol:
  name: '粉丝'
  # message when his idol is dead.
  idolDead: '偶像的死亡导致伤心过度，{{name}} 今晚不能使用能力。'

Enemy:
  # name for desc
  name: '宿敌'
  # jobname of Enemy
  jobname: '宿敌（{{jobname}}）'

LoreleiFamilia:
  name: '罗蕾莱眷属'
  jobname: '罗蕾莱眷属（{{jobname}}）'

MoonPhilia:
  # name for desc
  name: '月狂病'
  # jobname
  jobname: '月狂病（{{jobname}}）'

Bonds:
  name: '羁绊'
  jobname: '{{jobname}}（羁绊）'

Decider:
  jobname: '{{jobname}}（决定者）'

Authority:
  jobname: '{{jobname}}（权力者）'

Chemical:
  jobname: '{{left}}×{{right}}'
